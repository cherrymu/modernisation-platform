name: 'Format Code: ensure code formatting guidelines are met'

on:
  workflow_dispatch: null
  schedule:
    - cron: 45 4 * * 1-5

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: '${{ github.ref }}-${{ github.workflow }}'
  cancel-in-progress: true

jobs:
  build:
    name: MegaLinter
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run linter
        id: ml
        uses: oxsecurity/megalinter/flavors/terraform@v8.0.0
        env:
          APPLY_FIXES: all
          APPLY_FIXES_EVENT: all
          APPLY_FIXES_MODE: pull_request
          DISABLE_ERRORS: true
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          VALIDATE_ALL_CODEBASE: true

      - name: Check for changes
        id: check_changes
        run: |
          git add .
          changes=$(git diff --staged --name-only)
          if [ -z "$changes" ]; then
            echo "No changes detected."
          else
            echo "Changes detected."
            echo "changes=true" >> $GITHUB_ENV
            git diff --staged --name-only > changed_files.txt

      - name: Commit changes using GitHub GraphQL API
        if: env.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_MESSAGE: "Automated code formatting fixes"
          REPO_NAME: ${{ github.repository }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          # Store commit data
          commit_oid=$(git rev-parse HEAD)
          branch_name=$(git branch --show-current)
          repo_id=$(gh api graphql -f query='
          query {
            repository(owner:"'${{ github.repository_owner }}'", name:"'${{ github.event.repository.name }}'") {
              id
            }
          }' --jq '.data.repository.id')

          # Create commit with GraphQL
          files_for_commit=$(cat changed_files.txt | while read -r file; do
            encoded_content=$(base64 "$file")
            echo "{ \"path\": \"$file\", \"contents\": \"$encoded_content\" },"
          done)
          
          files_for_commit=$(echo "$files_for_commit" | sed '$ s/,$//')
          
          curl -X POST -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "mutation($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { oid } } }",
              "variables": {
                "input": {
                  "branch": {
                    "repositoryNameWithOwner": "'${REPO_NAME}'",
                    "branchName": "'${BRANCH_NAME}'"
                  },
                  "message": {
                    "headline": "'${COMMIT_MESSAGE}'"
                  },
                  "fileChanges": {
                    "additions": ['"$files_for_commit"']
                  },
                  "expectedHeadOid": "'"$commit_oid"'"
                }
              }
            }' https://api.github.com/graphql

      - name: Push changes using GraphQL
        if: env.changes == 'true'
        run: |
          # Push the created commit
          echo "Commit pushed successfully via GraphQL."
