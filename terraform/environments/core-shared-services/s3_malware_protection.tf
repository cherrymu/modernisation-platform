# GuardDuty Malware Protection Plan
resource "aws_guardduty_malware_protection_plan" "malware_protection_plan" {
  for_each = toset([
    module.s3-bucket.bucket.id,
    module.s3-software-bucket.bucket.id
  ])

  role = data.aws_iam_role.guardduty_malware_protection_role.arn

  protected_resource {
    s3_bucket {
      bucket_name = each.key
    }
  }

  actions {
    tagging {
      status = "ENABLED"
    }
  }

  tags = {
    "Name" = "GuardDutyMalwareProtectionPlan-${each.key}" # Unique tag for each bucket
  }
}

data "aws_iam_role" "guardduty_malware_protection_role" {
  name = "GuardDutyS3MalwareProtectionRole"
}
###  S3 Malware Scan Alerts using GuardDuty Malware Protection Object scan result.

# Create an SNS Topic for Malware Alerts

resource "aws_sns_topic" "s3_malware_scan_alerts" {
  #checkov:skip=CKV_AWS_26:"encrypted topics do not work with pagerduty subscription"
  name = "s3-malware-scan-alerts"
}

# link the sns topics to the pagerduty service
module "pagerduty_malware_alerts" {
  depends_on                = [aws_sns_topic.s3_malware_scan_alerts]
  source                    = "github.com/ministryofjustice/modernisation-platform-terraform-pagerduty-integration?ref=0179859e6fafc567843cd55c0b05d325d5012dc4" # v2.0.0
  sns_topics                = [aws_sns_topic.s3_malware_scan_alerts.name]
  pagerduty_integration_key = local.pagerduty_integration_keys["core_alerts_cloudwatch"]
}

# CloudWatch Metric Alarm for GuardDuty Malware Detections
resource "aws_cloudwatch_metric_alarm" "guardduty_malware_detected" {
  alarm_name        = "guardduty-malware-detected"
  alarm_description = "Triggers an alert when GuardDuty detects malware in S3 bucket."
  alarm_actions     = [aws_sns_topic.s3_malware_scan_alerts.arn]

  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods  = "1"
  metric_name         = "InfectedScanCount"
  namespace           = "AWS/GuardDuty"
  period              = "300"
  statistic           = "Sum"
  threshold           = "1"
  treat_missing_data  = "notBreaching"

  tags = local.tags
}

