# GuardDuty Malware Protection Plan
resource "aws_guardduty_malware_protection_plan" "malware_protection_plan" {
  for_each = toset([
    module.s3-bucket.bucket.id,
    module.s3-software-bucket.bucket.id
  ])

  role = data.aws_iam_role.guardduty_malware_protection_role.arn

  protected_resource {
    s3_bucket {
      bucket_name = each.key
    }
  }

  actions {
    tagging {
      status = "ENABLED"
    }
  }

  tags = {
    "Name" = "GuardDutyMalwareProtectionPlan-${each.key}" # Unique tag for each bucket
  }
}

data "aws_iam_role" "guardduty_malware_protection_role" {
  name = "GuardDutyS3MalwareProtectionRole"
}
###  S3 Malware Scan Alerts using GuardDuty Malware Protection Object scan result.

# Create an SNS Topic for Malware Alerts
#checkov:skip=CKV_AWS_26:"encrypted topics do not work with pagerduty subscription"

resource "aws_sns_topic" "s3_malware_scan_alerts" {
  name = "s3-malware-scan-alerts"
}

# link the sns topics to the pagerduty service
module "pagerduty_malware_alerts" {
  depends_on = [
    aws_sns_topic.s3_malware_scan_alerts
  ]
  source                    = "github.com/ministryofjustice/modernisation-platform-terraform-pagerduty-integration?ref=0179859e6fafc567843cd55c0b05d325d5012dc4" # v2.0.0
  sns_topics                = [aws_sns_topic.s3_malware_scan_alerts.name]
  pagerduty_integration_key = local.pagerduty_integration_keys["core_alerts_cloudwatch"]
}

# EventBridge Rule for GuardDuty S3 Malware Scan Alerts
resource "aws_cloudwatch_event_rule" "guardduty_s3_malware_scan" {
  name        = "guardduty-s3-malware-scan"
  description = "Triggers when GuardDuty detects malware in an S3 object"

  event_pattern = <<EOF
{
  "source": ["aws.guardduty"],
  "detail-type": ["GuardDuty Malware Protection Object Scan Result"],
  "detail": {
    "scanResultDetails": {
      "scanResultStatus": ["THREATS_FOUND"]
    }
  }
}
EOF
}

# Link EventBridge Rule to SNS
resource "aws_cloudwatch_event_target" "sns_target" {
  rule      = aws_cloudwatch_event_rule.guardduty_s3_malware_scan.name
  target_id = "SendToSNS"
  arn       = aws_sns_topic.s3_malware_scan_alerts.arn
}

# Allow EventBridge to Publish to SNS
resource "aws_sns_topic_policy" "sns_policy" {
  arn    = aws_sns_topic.s3_malware_scan_alerts.arn
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "events.amazonaws.com"
      },
      "Action": "SNS:Publish",
      "Resource": "${aws_sns_topic.s3_malware_scan_alerts.arn}"
    }
  ]
}
EOF
}