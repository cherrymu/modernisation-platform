locals {
  enable_malware_notifications = startswith(terraform.workspace, "ccms-ebs")
}

# KMS Key for SNS Encryption
resource "aws_kms_key" "kms_guardduty_ec2_malware" {
  count         = local.enable_malware_notifications ? 1 : 0
  description         = "KMS key for encrypting SNS topic for GuardDuty EC2 malware"
  enable_key_rotation = true
}

# Attach an Alias for the KMS Key 
resource "aws_kms_alias" "alias_guardduty_ec2_malware" {
  count         = local.enable_malware_notifications ? 1 : 0
  name          = "alias/guardduty_ec2_malware"
  target_key_id = aws_kms_key.kms_guardduty_ec2_malware[0].id
}

resource "aws_kms_key_policy" "sns_kms_key_policy" {
  count         = local.enable_malware_notifications ? 1 : 0
  key_id = aws_kms_key.kms_guardduty_ec2_malware[0].id
  policy = data.aws_iam_policy_document.sns_kms_key_policy[0].json
}

data "aws_iam_policy_document" "sns_kms_key_policy" {
  # checkov:skip=CKV_AWS_109: "Key policy requires asterisk resource"
  # checkov:skip=CKV_AWS_111: "Key policy requires asterisk resource"
  # checkov:skip=CKV_AWS_356: "Key policy requires asterisk resource"
  count         = local.enable_malware_notifications ? 1 : 0
  statement {
    sid       = "Allow management access of the key to the core-shared-services-account"
    effect    = "Allow"
    actions   = ["kms:*"]
    resources = ["*"]
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"]
    }
  }

  statement {
    sid    = "AllowSNSandEventBridgeToUseKMSKey"
    effect = "Allow"
    actions = [
      "kms:GenerateDataKey*",
      "kms:Decrypt"
    ]
    resources = ["*"]
    principals {
      type        = "Service"
      identifiers = ["sns.amazonaws.com", "events.amazonaws.com"]
    }
  }
}


# SNS Topic
resource "aws_sns_topic" "sns_guardduty_ec2_malware" {
  count             = local.enable_malware_notifications ? 1 : 0
  name              = "guardduty_ec2_malware"
  kms_master_key_id = aws_kms_key.kms_guardduty_ec2_malware[0].arn
}

# SNS Topic Policy
resource "aws_sns_topic_policy" "sns_policy_guardduty_ec2_malware" {
  count  = local.enable_malware_notifications ? 1 : 0
  arn    = aws_sns_topic.sns_guardduty_ec2_malware[0].arn
  policy = data.aws_iam_policy_document.s3_malware_scan_sns_policy[0].json
}

#  IAM Policy Document for SNS Permissions 
data "aws_iam_policy_document" "s3_malware_scan_sns_policy" {
  count  = local.enable_malware_notifications ? 1 : 0
  policy_id = "s3 malware scan sns policy"
  statement {
    sid    = "AllowTopicOwnerToManageSNS"
    effect = "Allow"
    actions = [
      "sns:Publish",
      "sns:RemovePermission",
      "sns:SetTopicAttributes",
      "sns:DeleteTopic",
      "sns:ListSubscriptionsByTopic",
      "sns:GetTopicAttributes",
      "sns:AddPermission",
      "sns:Subscribe"
    ]
    resources = [
      aws_sns_topic.sns_guardduty_ec2_malware[0].arn
    ]
    condition {
      test     = "StringEquals"
      variable = "AWS:SourceOwner"
      values = [
        data.aws_caller_identity.current.account_id
      ]
    }
    principals {
      type        = "AWS"
      identifiers = ["*"]
    }
  }

  ###  Allow EventBridge to Publish Messages to SNS
  statement {
    sid    = "AllowEventBridgeToPublishToSNS"
    effect = "Allow"
    actions = [
      "sns:Publish"
    ]
    resources = [
      aws_sns_topic.sns_guardduty_ec2_malware[0].arn
    ]
    principals {
      type        = "Service"
      identifiers = ["events.amazonaws.com"]
    }
  }
}

# EventBridge IAM Role
resource "aws_iam_role" "eventbridge_guardduty_ec2_malware" {
  count = local.enable_malware_notifications ? 1 : 0

  name = "guardduty_ec2_malware"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "events.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_role_policy" "eventbridge_guardduty_ec2_malware" {
  count = local.enable_malware_notifications ? 1 : 0
  name  = "guardduty_ec2_malware"
  role  = aws_iam_role.eventbridge_guardduty_ec2_malware[0].id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = ["sns:Publish"]
        Resource = aws_sns_topic.sns_guardduty_ec2_malware[0].arn
      },
      {
        Effect = "Allow"
        Action = [
          "kms:GenerateDataKey",
          "kms:Decrypt"
        ]
        Resource = aws_kms_key.kms_guardduty_ec2_malware[0].arn
      }
    ]
  })
}

# EventBridge Rule
resource "aws_cloudwatch_event_rule" "eb_rule_guardduty_ec2_malware" {
  count       = local.enable_malware_notifications ? 1 : 0
  name        = "guardduty_ec2_malware_alert"
  description = "Trigger SNS on GuardDuty EC2 malware findings"

  event_pattern = jsonencode({
    source = ["aws.guardduty"]
    detail = {
      type = ["Execution:EC2/MaliciousFile"]
    }
  })
}

# EventBridge Target (SNS)
resource "aws_cloudwatch_event_target" "eb_target_sns_guardduty_ec2_malware" {
  count     = local.enable_malware_notifications ? 1 : 0
  rule      = aws_cloudwatch_event_rule.eb_rule_guardduty_ec2_malware[0].name
  target_id = "send-to-sns"
  arn       = aws_sns_topic.sns_guardduty_ec2_malware[0].arn
  role_arn  = aws_iam_role.eventbridge_guardduty_ec2_malware[0].arn
}

# link the sns topics to the pagerduty service
module "pagerduty_malware_alerts" {
  count                     = local.enable_malware_notifications ? 1 : 0
  depends_on                = [aws_sns_topic.sns_guardduty_ec2_malware]
  source                    = "github.com/ministryofjustice/modernisation-platform-terraform-pagerduty-integration?ref=d88bd90d490268896670a898edfaba24bba2f8ab" # v3.0.0
  sns_topics                = [aws_sns_topic.sns_guardduty_ec2_malware[0].name]
  pagerduty_integration_key = local.pagerduty_integration_keys["core_alerts_high_priority_cloudwatch"]
}
