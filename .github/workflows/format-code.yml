---
  name: 'Format Code: ensure code formatting guidelines are met'
  
  on:
    workflow_dispatch: null
    schedule:
      - cron: 45 4 * * 1-5
  
  permissions:
    contents: write
    pull-requests: write
    actions: write  # Necessary for API-based commit signing
  
  concurrency:
    group: '${{ github.ref }}-${{ github.workflow }}'
    cancel-in-progress: true
  
  jobs:
    build:
      name: MegaLinter
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Code
          uses: actions/checkout@v3
          with:
            token: '${{ secrets.GITHUB_TOKEN }}'
            fetch-depth: 0
  
        - name: Prepare Git options
          run: bash ./scripts/git-setup.sh
  
        - name: Create new branch
          run: |
            date=$(date +%Y_%m_%d)
            branch_name="format_fixes_$date"
            git checkout -b $branch_name
  
        - name: Run linter
          id: ml
          uses: oxsecurity/megalinter/flavors/terraform@v8.0.0
          env:
            APPLY_FIXES: all
            APPLY_FIXES_EVENT: all
            APPLY_FIXES_MODE: pull_request
            DISABLE_ERRORS: true
            EMAIL_REPORTER: false
            ENABLE_LINTERS: JSON_PRETTIER,YAML_PRETTIER,TERRAFORM_TERRAFORM_FMT,MARKDOWN_MARKDOWNLINT
            GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
            VALIDATE_ALL_CODEBASE: true
            YAML_PRETTIER_FILTER_REGEX_EXCLUDE: (.github/*)
            MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE: (terraform/modules/.*/.*.md)
            REPORT_OUTPUT_FOLDER: none
  
        - name: Check for changes
          run: |
            git add .
            changes=$(git diff --staged --name-only)
            if [ -z "$changes" ]; then
              echo "No changes detected."
            else
              echo "Changes detected."
              echo "changes=true" >> $GITHUB_ENV
            fi
  
        - name: Create verified commit using GraphQL API
          if: env.changes == 'true'
          run: |
            # Gather commit information
            commit_message="Automated formatting fixes from GitHub Actions"
            branch_name=$(git branch --show-current)
            
            # Create commit using GitHub GraphQL API
            curl -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
                 -X POST \
                 -d '{
                   "query": "mutation($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { oid message } } }",
                   "variables": {
                     "input": {
                       "branch": {
                         "repositoryNameWithOwner": "${{ github.repository }}",
                         "branchName": "'"$branch_name"'"
                       },
                       "message": {
                         "headline": "'"$commit_message"'"
                       },
                       "fileChanges": {
                         "additions": [{
                           "path": "workflow-output.txt",
                           "contents": "'"$(base64 workflow-output.txt)"'"
                         }]
                       },
                       "expectedHeadOid": "$(git rev-parse HEAD)"
                     }
                   }'
                 https://api.github.com/graphql
  
        - name: Push changes using GraphQL API
          if: env.changes == 'true'
          run: |
            curl -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
                 -X POST \
                 -d '{
                   "query": "mutation($input: CreateRefInput!) { createRef(input: $input) { ref { name } } }",
                   "variables": {
                     "input": {
                       "repositoryNameWithOwner": "${{ github.repository }}",
                       "refName": "refs/heads/'"$branch_name"'",
                       "oid": "$(git rev-parse HEAD)"
                     }
                   }'
                 https://api.github.com/graphql
  
        - name: Create pull request
          if: env.changes == 'true'
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            pr_title="Automated code formatting updates"
            pr_body="This PR contains formatting fixes applied by the Format Code GitHub Actions workflow."
            branch_name=$(git branch --show-current)
            pr_head="${{ github.repository_owner }}:${branch_name}"
            pr_base="main"
            gh pr create --title "$pr_title" --body "$pr_body" --head "$pr_head" --base "$pr_base" --label "code quality"
  